#!/usr/bin/perl 

# A real, unreadable Perl code
# Copyleft (C) Ákos Kovács

use warnings;
use strict;

my $KERNEL_NAME = $ARGV[0];
my $OUT_FILE = $ARGV[1];

my @nm_out = `nm $KERNEL_NAME`;
my @out_code = ();
my $vtype = ();
my $TIME = localtime(time());
my $out_header = <<EOH;
/****************************************************
                   DO NOT EDIT! 
   Automatically generated by 'scripts/genksyms.pl'
              $TIME
*****************************************************/
#include <ksymbol.h>
#include <string.h>
#include <basic.h>

struct ksymbol sym_table[] = {
EOH

my $out_end = <<EOE;
void *get_ksymbol(const char *name, symbol_type_t flags)
{
    struct ksymbol *sym = sym_table;
    while (sym->ks_name != NULL && sym->ks_address != 0) {
        if ((strcmp(name, sym->ks_name) == 0) && (sym->ks_type & flags)) 
            return (void *)sym->ks_address;

        sym++;
    }
    return NULL;
}
EOE

sub symbol_flag {
    my $sym_type = shift;

    if ($sym_type eq 'T' or $sym_type eq 't') {
        return "SYM_CODE";
    } elsif ($sym_type eq 'B' or $sym_type eq 'b'
                or $sym_type eq 'a' or $sym_type eq 'A'
                or $sym_type eq 'R') {
        return "SYM_BSS";
    } elsif ($sym_type eq 'd') {
        return "SYM_DATA";
    }
}

#==~~~--- main ---~~~==#

if ($#ARGV+1 != 2) {
    die "Usage: [object file] [out code]";
}


push(@out_code, $out_header);
foreach my $line (@nm_out) {
    if ($line =~ /(\w+) (\w) (\w+)/) {
        $vtype = symbol_flag($2);
        push(@out_code, "\t{ 0x$1, $vtype, \"$3\" },\n");
    }
}

push(@out_code, "\t{ 0x0, 0, NULL }\n};\n\n");
push(@out_code, $out_end);

open(OUT, '>', $OUT_FILE) or die "Cannot create file: $!";
print OUT @out_code;
close(OUT);
